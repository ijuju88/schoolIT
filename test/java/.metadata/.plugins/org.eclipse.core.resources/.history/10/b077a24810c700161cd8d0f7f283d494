package ChatProgram.Server;

import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;

import javax.swing.*;
import javax.swing.border.*;

public class Server extends JFrame implements ActionListener{
	
	private static final long serialVersionUID = -5988620707126480889L;
	
	// Server Frame
	private JPanel contentPane;
	private JTextField tPort;
	private JTextArea ta = new JTextArea();
	private JButton button_start = new JButton("서버 실행");
	private JButton button_stop = new JButton("서버 중지");

	// Network 자원
	private ServerSocket serverSocket;
	private Socket socket; //사용자로부터 받을 소켓~
	private int port = 5001;
	
	//연결시 개별 스레드 실행하고 각각읜 객체를 Vector에 저장합니다.
	private Vector<UserInfo> vector_user = new Vector<>();
	private Vector<RoomInfo> vector_room = new Vector<>();
	
	// 포트의 . 을 나누기위한것
	private StringTokenizer stringTokenizer;
	
	
	private void server_start(){
		
		//gui테마를 변경합니다.
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (Exception e) {
			// TODO: handle exception
		}
		try {
			// 서버 소켓 객체 serverSocket 생성
			serverSocket = new ServerSocket(port);
		} catch (IOException e) {
			//포트가 존재한다면 에러메세지창 출력
			JOptionPane.showMessageDialog(null, "이미 사용중인 포트", "알림", JOptionPane.ERROR_MESSAGE);
		}
		if(serverSocket != null){ // 정상적으로포트가 열렸다면
			connection(); //사용자가 접속할때의 메소드
		}
			
	}
	
	//사용자가 접속할때의 메소드에 대한 스레드생성을 위한 클래스
	public class Socket_thread implements Runnable{
		public void run() {
			while(true){
				try { 
					ta.append("사용자 접속 대기중\n");
					socket = serverSocket.accept(); 
					//프로그램은 멈추고 외부의 소켓 접속 요청을 기다립니다. 소켓 접속 요청이 오면 클라이언트와 통신을 할 서버 측 소켓을 만들고 외부 소켓과 연결한 후 레퍼런스가 반환된다.
					
					UserInfo userInfo = new UserInfo(socket);
					userInfo.start();//객체의 스레드를 실행합니다.
				} catch (IOException e) {
					ta.append("서버가 중지 되었습니다\n");
					break;
				}
			}
		}
	}
	
	
	//사용자가 접속할때의 메소드
	private void connection(){
		//1가지 스레드에서는 1가지 일만 처리합니다 그래서 스레드를 따로 처리할겁니다.
		//run으로 하셔도 됩니다.
		Thread thread = new Thread(new Socket_thread());
		thread.start();
	
	}
	
	public Server(){
		init();	//화면생성 메소드
		start();//리소드 설정매소드
	}
	private void start(){
		button_start.addActionListener(this);
		button_stop.addActionListener(this);
	}
	private void init(){ // 화면 구성
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 412, 453);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(12, 10, 372, 257);
		contentPane.add(scrollPane);
		scrollPane.setViewportView(ta);
		ta.setEditable(false);
		tPort = new JTextField();
		tPort.setBounds(91, 286, 293, 23);
		contentPane.add(tPort);
		tPort.setColumns(10);
		

		button_start.setBounds(12, 335, 177, 25);
		contentPane.add(button_start);
		

		button_stop.setBounds(207, 335, 177, 25);
		contentPane.add(button_stop);
		button_stop.setEnabled(false);
		JLabel lblNewLabel = new JLabel("포트 번호");
		lblNewLabel.setBounds(12, 290, 67, 15);
		contentPane.add(lblNewLabel);
		this.setVisible(true);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Server();
	}
	public void actionPerformed(ActionEvent e) {
		//서버실행버튼을 누르면
		if(e.getSource() == button_start){
			System.out.println("start server");
			
			
			port = Integer.parseInt(tPort.getText().trim()); //포트값을 받아옵니다.
			server_start(); //소켓 생성 및 사용자 접속대기
			button_start.setEnabled(false);
			tPort.setEditable(false);
			button_stop.setEnabled(true);
			
		//서버중지를 누르면
		} else if(e.getSource() == button_stop){
			button_start.setEnabled(true);
			tPort.setEditable(true);
			button_stop.setEnabled(false);
			try {
				serverSocket.close();
				vector_user.removeAllElements();
				vector_room.removeAllElements();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.out.println("stop server");
		}
	}
	
	
	private class UserInfo extends Thread{
		
		//Network 자원
		private InputStream inputStream;
		private OutputStream outputStream;
		private DataOutputStream dataOutputStream;
		private DataInputStream dataInputStream;
		
		
		private Socket socket_user; //사용자가 적은 소켓
		private String Nickname = ""; //사용자가 적은 name
		private String CurrentRoom = null;
		private boolean RoomCheck = true; // 기본적으로 채팅방을 만들 수 있는 상태
		
		//생성자
		public UserInfo(Socket socket){
			this.socket_user = socket;
			userNetwork();
		}
		
		public String getNicname(){
			return Nickname;
		}
		
		//네트워크 자원 설정메소드
		public void userNetwork(){
			try {
				
				//객체생성중...
				inputStream = socket_user.getInputStream();
				dataInputStream = new DataInputStream(inputStream);
				outputStream = socket_user.getOutputStream();
				dataOutputStream = new DataOutputStream(outputStream);	
				
				//사용자의 아이디를 받아올겁니다.
				Nickname = dataInputStream.readUTF();
				ta.append(Nickname + " : 사용자 접속\n");
				
				//새로운 사용자가 연결이 되엇다면..사용자들에게 새로운 사용자가 왔다고 알릴겁니다.
			
				BroadCast("NewUser/" + Nickname);
				
				for(int i = 0; i< vector_user.size(); i++){ // 기존 사용자의 서버 알림 및 새 사용자의 ID 전송합니다
					UserInfo userInfo = (UserInfo) vector_user.elementAt(i);
					this.send_Message("OldUser/" +  userInfo.getNicname());
				}
				
				/*
				vector_user.add(this); 에 들어가는 것들...
				
				Class UserInfo...
				
				private InputStream inputStream;
				private OutputStream outputStream;
				private DataOutputStream dataOutputStream;
				private DataInputStream dataInputStream;
		
		
				private Socket socket_user; //사용자가 적은 소켓
				private String Nickname = ""; //사용자가 적은 name
				
				send_Message(String str);
				BroadCast(String str);
				  */
				vector_user.add(this);//사용자에게 알린후 Vector에 자신을 추가함
				
				BroadCast("user_list_update/ ");
				SetOldRoom();
			} catch (IOException e) {
				JOptionPane.showMessageDialog(null, "Stream설정 에러", "알림", JOptionPane.ERROR_MESSAGE);
			}
		}
		
		//사용자들에게 새로운 사용자가 왔다고 알리는 메소드
		private void BroadCast(String str){
			for(int i = 0; i< vector_user.size(); i++){ // 기존 사용자의 서버 알림 및 새 사용자의 ID 전송합니다
				UserInfo userInfo = (UserInfo) vector_user.elementAt(i);
				userInfo.send_Message(str);
			}
		}
		
		//자신에게 기존 방 목록을 받아오는 부분
		private void SetOldRoom(){
			for(int i = 0; i< vector_room.size(); i++){
				RoomInfo roomInfo = (RoomInfo) vector_room.elementAt(i);
				this.send_Message("OldRoom/" + roomInfo.getRoomName());
			}
			this.send_Message("room_list_update/ ");
		}
		private void ExitRoom(UserInfo userInfo){
			for(int i = 0; i< vector_room.size(); i++){
				RoomInfo roomInfo = (RoomInfo) vector_room.elementAt(i);
				if(roomInfo.getRoomName().equals(CurrentRoom)){
					int size = roomInfo.Remove_User(userInfo);
					if(size ==0){
						BroadCast("ExitRoom/"+CurrentRoom);
						vector_room.remove(i);
						BroadCast("room_list_update/ ");//Client의 방정보리스트를 업데이트 할겁니다
					}
					else{
						roomInfo.BroadCast_Room("Chatting/알림/******    "+Nickname+"님이 퇴장하셨습니다     *****");
					}
					CurrentRoom = null;
					break;
				}
			}
			
		}
		
		//클라이언트와 연결되는 메세지가 들어오는곳을 개별스레드를 돌려서 message받을겁니다
		@Override
		public void run() {
			super.run();
			while(true){
				try {
					String msg = dataInputStream.readUTF(); //메세지 수신
					ta.append(Nickname + " : " + msg + "\n"); 
					InMessage(msg); //들어오는 message만 처리하는 메소드를 만듭니다.
				} catch (IOException e) {
					ta.append(Nickname + " : 사용자 접속 끊어짐\n"); //알림창으로 하면 확인누르지 않으면 나오지 않기때문에..
					ExitRoom(this);
					try {
						dataInputStream.close();
						dataOutputStream.close();
						socket_user.close();
						vector_user.remove(this); //해당사용자를 삭제합니다.
						BroadCast("UserOut/"+Nickname); //Client사용자들에게 해당사용자가 접속끊어진걸 알림
						BroadCast("user_list_update/ ");//Client의 사용자 리스트에 업데이트 할겁니다
					} catch (IOException e1) {}
					
					
					break;
				}
				
			}
		}
		
		 //클라이언트로부터 들어오는 메시지를 처리합니다
		private void InMessage(String str){
			stringTokenizer = new StringTokenizer(str, "/");
			String protocol = stringTokenizer.nextToken();
			String message = stringTokenizer.nextToken();
			System.out.println("protocol : " + protocol);
			
			//protocol의 값이 Note(쪽지)면..
			if(protocol.equals("Note")){
				String note = stringTokenizer.nextToken();
				System.out.println("받는 사람 : " + message);
				System.out.println("보낼 내용 : " + note);
				for(int i = 0; i< vector_user.size(); i++){
					UserInfo userInfo = (UserInfo) vector_user.elementAt(i);
					if(userInfo.Nickname.equals(message)){
						userInfo.send_Message("Note/"+ Nickname+"/" + note);
					}
				}
			}
			
			//채팅방을 만들면
			else if(protocol.equals("CreateRoom")){
				//방이존재하는지 확인합니다.
				for(int i = 0; i< vector_room.size(); i++){
					RoomInfo roomInfo = (RoomInfo) vector_room.elementAt(i);
					if(roomInfo.getRoomName().equals(message)){ //방이 이미  존재
						send_Message("CreateRoomFail/ok"); //방만들기 실패를 보냅니다.
						RoomCheck = false;
						break;
					}
				}
				
				//방만들기가 가능하다면~
				if(RoomCheck){
					RoomInfo roomInfo_new_room = new RoomInfo(message, this); 
					//방이름과, 자기자신의 객체를 추가합니다.(채팅방1개를 만듭니다.)
					
					vector_room.add(roomInfo_new_room); //전체방 벡터에 방을 추가합니다.
					CurrentRoom = message;
					
					//사용자에게 어떤방이 만들어졌는지 알려줍니다.
					send_Message("CreateRoom/" + message); 
					//다른 사용자가 오면 사용자에게 알려줍니다.
					send_Message("Chatting/알림/******    "+Nickname+"님이 입장하셨습니다     *****");
					BroadCast("NewRoom/"+message);
				}
				else{
					RoomCheck = true;	
				}
				
			}
			else if(protocol.equals("Chatting")){
				String msg = stringTokenizer.nextToken();
				for(int i =0; i <vector_room.size(); i++){
					RoomInfo roomInfo = (RoomInfo) vector_room.elementAt(i);
					if(roomInfo.getRoomName().equals(message)){ // 해당 방을 찾으면
						roomInfo.BroadCast_Room("Chatting/"+Nickname+"/"+msg);//모든사용자에게 알립니다
					}
				}
			}
			
			//채팅방에 들어가면~
			else if(protocol.equals("JoinRoom")){
				for(int i =0; i <vector_room.size(); i++){
					RoomInfo roomInfo = (RoomInfo) vector_room.elementAt(i);
					if(roomInfo.getRoomName().equals(message)){
						CurrentRoom = message;
						
						//해당채팅방에 사용자를 추가할겁니다.
						roomInfo.Add_User(this);
						
						//채팅방에 있는 사람들에게 새로운 id명이 왔다고 알릴겁니다.
						roomInfo.BroadCast_Room("Chatting/알림/******    "+Nickname+"님이 입장하셨습니다     *****");
						send_Message("JoinRoom/" + message);
					}
				}
			}
			else if(protocol.equals("ExitRoom")){
				ExitRoom(this);
			}
		}
		
		//사용자들에게 보낼 메세지 구현 메소드 - 문자열을 받아서 전송
		private void send_Message(String message){
			try {
				dataOutputStream.writeUTF(message);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				ta.append("메세지 전송 실패");
			}
		}
		
	}
	
	//채팅방구현 클래스
	private class RoomInfo{

		private String Room_name;
		private Vector vector_room_user = new Vector(); //방안에 있는 id들의 백터입니다.
		
		//생성자
		RoomInfo(String str, UserInfo userInfo){
			this.Room_name = str;
			this.vector_room_user.add(userInfo);
		}
		public String getRoomName(){
			return Room_name;
		}
		public Vector getRoom_user(){
			return vector_room_user;
		}
		
		//해당채팅방에 사용자를 추가하는 메서드
		private void Add_User(UserInfo userInfo){
			this.vector_room_user.add(userInfo);
		}
		public int Remove_User(UserInfo userInfo){
			this.vector_room_user.remove(userInfo);
			return vector_room_user.size();

		}
		public void BroadCast_Room(String str){ //현재 방의 모든 사람에게 알린다.
			for(int i = 0; i<vector_room_user.size(); i++){
				UserInfo userInfo = (UserInfo) vector_room_user.elementAt(i);
				userInfo.send_Message(str);
			}
		}
		
		
	}
}
